This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src/components/navbar.tsx, src/lib/constants.ts, src/components/home/HomeHero.tsx, src/components/AppNavbar.tsx
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
src/
  components/
    home/
      HomeHero.tsx
    AppNavbar.tsx
    navbar.tsx
  lib/
    constants.ts

================================================================
Files
================================================================

================
File: src/components/AppNavbar.tsx
================
// components/AppNavbar.tsx
'use client'

import { useMemo } from 'react'
import { usePathname } from 'next/navigation'
import { Navbar } from '@/components/navbar'
// import type { NavItem } from '@/lib/constants'

export default function AppNavbar({
  navItems,
  caseItems
}: {
  navItems: any
  caseItems: any
}) {
  const pathname = usePathname()
  const items = useMemo(
    () => (pathname === '/' ? navItems : caseItems),
    [pathname, navItems, caseItems]
  )

  return <Navbar items={items} />
}

================
File: src/components/home/HomeHero.tsx
================
export default function HomeHero() {
  return (
    <section id="home" className="halfPage mt-16">
      <div className="section grid grid-cols-1 md:grid-cols-2 gap-6 justify-items-center md:justify-items-end">
        <article className="flex flex-col gap-6 justify-center">
          <h2>
            Hi, I’m <span className="text-primary">Sami</span> — a UX/UI
            designer who makes digital experiences both easy to use and hard to
            ignore.
          </h2>
          <p className="text-text-body">
            I design interfaces your users will appreciate.
          </p>
        </article>
        <img src="/assets/NewAvatar.png" alt="Avatar" />
      </div>
    </section>
  )
}

================
File: src/lib/constants.ts
================
const ContactMap = new Map()
ContactMap.set('email', 'samifdesigns@gmail.com')
ContactMap.set('linkedin', 'https://www.linkedin.com/in/sami-fares812')

const NavigationMap = new Map()
NavigationMap.set('home', { label: '', id: 'home' })
NavigationMap.set('work', { label: 'Work', id: 'work' })
NavigationMap.set('about', { label: 'About', id: 'about' })
NavigationMap.set('contact', { label: 'Contact', id: 'contact' })

const CasesMap = new Map()
CasesMap.set(0, { label: 'Problem', id: 'Problem' })
CasesMap.set(1, { label: 'Overview', id: 'Overview' })
CasesMap.set(2, { label: 'Challenges', id: 'Challenges' })
CasesMap.set(3, { label: 'Research', id: 'Research' })
CasesMap.set(4, { label: 'Strategy', id: 'Strategy' })
CasesMap.set(5, { label: 'Final', id: 'Final' })

export { ContactMap, NavigationMap, CasesMap }

================
File: src/components/navbar.tsx
================
'use client'

import { useMemo, useState } from 'react'
import { useRouter, usePathname } from 'next/navigation'
import Link from 'next/link'
import { FaBars } from 'react-icons/fa6'

import {
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuLink
} from '@/components/ui/navigation-menu'
import { Button } from '@/components/ui/button'
import { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet'
import { useSmoothScroll } from '@/lib/hooks/useSmoothScroll'
import { cn } from '@/lib/utils'
import { ThemeToggle } from './themeToggle'

interface NavItem {
  label: string
  id: string
}
interface NavProps {
  items: NavItem[]
}

export const Navbar = ({ items }: NavProps) => {
  const pathname = usePathname()
  const router = useRouter()
  const { handleNavClick, scrollToPosition } = useSmoothScroll()

  const [open, setOpen] = useState(false)
  const [active, setActive] = useState('')

  const isHome = useMemo(() => pathname === '/', [pathname])

  const handleClick = (e: React.MouseEvent<HTMLAnchorElement>, to: string) => {
    handleNavClick(e, to, {
      behavior: 'smooth',
      block: 'start'
    })
    setOpen(false)
    setActive(to)
  }

  const handleLogoClick = () => {
    if (isHome) {
      scrollToPosition(0)
    } else {
      router.push('/')
    }

    setActive('')
    return setOpen(false)
  }

  return (
    <header className="bg-background fixed top-0 w-full">
      <div className="max-w-custom h-16 mx-auto flex items-center justify-between py-y-4 px-x-gap border-b border-b-primary">
        <span
          onClick={handleLogoClick}
          className={cn('text-lg font-bold text-primary cursor-pointer')}>
          Sami Fares
        </span>

        <nav className={cn('hidden', isHome ? 'md:block' : 'lg:block')}>
          <NavigationMenu>
            <NavigationMenuList className="flex gap-8">
              {items.map(item => {
                if (item.id === 'home') return null
                return (
                  <NavigationMenuItem
                    className={cn(
                      'navLink',
                      active === item.id ? 'active-navLink' : ''
                    )}
                    key={item.id}>
                    <NavigationMenuLink asChild>
                      <Link
                        key={item.id}
                        href={item.id}
                        onClick={e => handleClick(e, item.id)}>
                        {item.label}
                      </Link>
                    </NavigationMenuLink>
                  </NavigationMenuItem>
                )
              })}
              <ThemeToggle />
            </NavigationMenuList>
          </NavigationMenu>
        </nav>

        {/* Mobile Navigation */}
        <div className={isHome ? 'md:hidden' : 'lg:hidden'}>
          <Sheet open={open} onOpenChange={setOpen}>
            <SheetTrigger asChild>
              <Button
                variant="ghost"
                size="icon"
                aria-label="Open menu"
                className="text-primary">
                <FaBars />
              </Button>
            </SheetTrigger>
            <SheetContent side="top" className="text-xl">
              <span
                onClick={handleLogoClick}
                className="cursor-pointer text-2xl font-bold text-primary">
                Sami Fares
              </span>
              <nav className="mt-6">
                <NavigationMenu>
                  <NavigationMenuList className="flex flex-col gap-4 items-start">
                    {items.map(item => {
                      if (item.id === 'home') return null
                      return (
                        <NavigationMenuItem
                          className={cn(
                            'navLink',
                            active === item.id ? 'active-navLink' : ''
                          )}
                          key={item.id}>
                          <NavigationMenuLink asChild>
                            <Link
                              key={item.id}
                              href={item.id}
                              onClick={e => handleClick(e, item.id)}>
                              {item.label}
                            </Link>
                          </NavigationMenuLink>
                        </NavigationMenuItem>
                      )
                    })}
                    <ThemeToggle />
                  </NavigationMenuList>
                </NavigationMenu>
              </nav>
            </SheetContent>
          </Sheet>
        </div>
      </div>
    </header>
  )
}




================================================================
End of Codebase
================================================================
